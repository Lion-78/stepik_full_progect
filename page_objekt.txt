Каждую страницу веб приложения можно описать в виде объекта класса;
Способы взаимодействия пользователя со страницей можно описать с помощью методов класса;
В идеале тест, который будет использовать Page Object, должен описывать бизнес-логику тестового сценария и скрывать Selenium-методы взаимодействия с браузером и страницей;

Важно! Обычно методы у Page Object бывают двух типов: сделать что-то и проверить что-то.

Рассмотрим страницу товара в интернет магазине http://selenium1py.pythonanywhere.com/catalogue/the-shellcoders-handbook_209/.

Какие могут быть методы у Page Object, ассоциированного с такой страницей? Запишем основные сценарии: 

    добавить в корзину;
    проверить, что есть сообщение об успешном добавлении в корзину;
    перейти к написанию отзыва;
    проверить, что есть название, цена, описание товара;
    вернуться на главную.

Обратите внимание, что все проверки у нас тоже становятся отдельными методами. В самом тест-кейсе не остается никаких вспомогательных слов типа assert, только описание шагов.
def test_add_to_cart(browser):
    page = ProductPage(url="", browser)   # инициализируем объект Page Object
    page.open()                           # открываем страницу в браузере
    page.should_be_add_to_cart_button()   # проверяем что есть кнопка добавления в корзину
    page.add_product_to_cart()            # жмем кнопку добавить в корзину 
    page.should_be_success_message()      # проверяем что есть сообщение с нужным текстом
	
base_page.py - базовая страница, от которой будут унаследованы все остальные классы. В ней мы опишем вспомогательные методы для работы с драйвером;
Реализуем Page Object, который будет связан с главной страницей интернет-магазина:
1. Откройте файл main_page.py
2. В нем нужно сделать импорт базового класса BasePage: from .base_page import BasePage
3. В нем создайте класс  MainPage. Его нужно сделать наследником класса BasePage. 
Класс-предок в Python указывается в скобках: class MainPage(BasePage): таким образом, класс MainPage будет иметь доступ ко всем атрибутам и методам своего класса-предка.
4. Перенесите метод из предыдущего урока в класс MainPage:
def go_to_login_page(browser):
   login_link = browser.find_element_by_css_selector("#login_link")
   login_link.click()
Чтобы все работало, надо слегка видоизменить его. 
В аргументы больше не надо передавать экземпляр браузера, мы его передаем и сохраняем на этапе создания Page Object. 
Вместо него нужно указать аргумент self , чтобы иметь доступ к атрибутам и методам класса: 
def go_to_login_page(self):
Так как браузер у нас хранится как аргумент класса BasePage, обращаться к нему нужно соответствующим образом с помощью 
self: 
self.browser.find_element_by_css_selector("#login_link")
Заодно заменим find на более универсальный: 
self.browser.find_element(By.CSS_SELECTOR, "#login_link")
Итого, файл main_page.py: 
from .base_page import BasePage
from selenium.webdriver.common.by import By

class MainPage(BasePage): 
    def go_to_login_page(self):
        login_link = self.browser.find_element(By.CSS_SELECTOR, "#login_link")
        login_link.click()
		
		
		

base_page.py - тут мы храним методы которые применяются по всему проекту вообще, всё завернуто в класс, чтобы было удобно импортировать.

locators.py - тут мы храним локаторы, в виде констант. Локаторы каждой отдельной страницы завёрнуты в класс, чтобы было удобно импортировать

main_page.py - тут мы храним методы по конкретной странице, завернутые в класс этой странице. 
Класс этот - условный MainPage - наследник класса BasePage, чтобы можно было пользоваться методами, описанными в base_page.py

Файл test_main_page.py - тут мы выполняем сами тесты. по префиксу "test_" понимам что это для PyTest. Тут вызванные функции будут запускаться.

Здесь мы будем создавать функции, которым:

    выдаём нужный для проверки линк
    созаём в функции переменную page, которой передаём браузер из base_page.py(класс BasePage) и линк из шага №1
    следом говорим "page, откройся", но методом из base_page.py(класс BasePage)
    добавляем проверки, которые создавали методами в main_page.py
